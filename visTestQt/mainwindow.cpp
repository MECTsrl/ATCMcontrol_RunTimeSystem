// checksum 0xa193 version 0x30001
/*
   This file was generated by the Mobile Qt Application wizard of Qt Creator.
   MainWindow is a convenience class containing mobile device specific code
   such as screen orientation handling.
   It is recommended not to modify this file, since newer versions of Qt Creator
   may offer an updated version of it.
 */
#include <QtCore/QCoreApplication>
#include <QMessageBox>
#include <QPicture>
#include "ui_mainwindow.h"
#include "mainwindow.h"
#include "mainthread.h"

	MainWindow::MainWindow(QWidget *parent, char * RemoteAddress, int RemotePort )
: QMainWindow(parent), ui(new Ui::MainWindow)
{
	/* load the GUI */
	ui->setupUi(this);
	showFullScreen();

	QMetaObject::connectSlotsByName(this);

	_RemoteAddress = RemoteAddress;
	_RemotePort = RemotePort;

	R_array[0] = ui->lcdNumberR0;
	R_array[1] = ui->lcdNumberR1;
	R_array[2] = ui->lcdNumberR2;
	R_array[3] = ui->lcdNumberR3;
	R_array[4] = ui->lcdNumberR4;
	R_array[5] = ui->lcdNumberR5;
	R_array[6] = ui->lcdNumberR6;
	R_array[7] = ui->lcdNumberR7;
	ledIP[0] = ui->ledIP_1;
	ledIP[1] = ui->ledIP_2;
	ledIP[2] = ui->ledIP_3;
	ledIP[3] = ui->ledIP_4;
	ledIP[4] = ui->ledIP_5;
	ledIP[5] = ui->ledIP_6;
	ledIP[6] = ui->ledIP_7;
	ledIP[7] = ui->ledIP_8;
	ledIP[8] = ui->ledIP_9;
	ledIP[9] = ui->ledIP_10;
	ledIP[10] = ui->ledIP_11;
	ledIP[11] = ui->ledIP_12;
	ledIP[12] = ui->ledIP_13;

	/* load the led pixmap */
	if(red_on.load(":/led/img/led-red-on.png") == false)
	{
		printf("ERROR loading '%s'\n", ":/led/img/led-red-on.png");
	}
	if(red_off.load(":/led/img/led-red-off.png") == false)
	{
		printf("ERROR loading '%s'\n", ":/led/img/led-red-off.png");
	}
	if(green_on.load(":/led/img/led-green-on.png") == false)
	{
		printf("ERROR loading '%s'\n", ":/led/img/led-green-on.png");
	}
	if(green_off.load(":/led/img/led-green-off.png") == false)
	{
		printf("ERROR loading '%s'\n", ":/led/img/led-green-off.png");
	}

	/* show the initial led pixmap */
	for (int i = 0; i < 13; i++)
	{
		ledIP[i]->setPixmap(red_on);
	}

	/* start the comunication thread */
	comm_th = new ComThread(_RemoteAddress, _RemotePort);
	comm_th->start();
	/* connect the signal from thread that comunicate the actual status of the led to the main windows: 
	 * only the main windows can update the gui using pixmap
	 */

	connect(comm_th, SIGNAL(switch_led(int, bool)), this, SLOT(switchLed(int, bool)));
	connect(comm_th, SIGNAL(update_lcd(int, float)), this, SLOT(updateLCD(int, float)));
}

MainWindow::~MainWindow( )
{
	Close();
	delete ui;
}

#if 0
void MainWindow::mousePressEvent(QMouseEvent *event)
{
	int demo_nb = 0;
	char filename [1000];
	printf("MOUSE PREMUTO STATO %d\n", demo_nb);

	ui->groupBox->hide();
	ui->groupBox_2->hide();
	ui->demo->show();
	for (demo_nb = 0; ; demo_nb++)
	{
		QPixmap bg;
		sprintf(filename, "./img/demo%d.png", demo_nb);

		if (bg.load( filename ) == false)
		{
			printf ("error %s\n", filename);
			demo_nb = 0;
			continue;
		}
		ui->demo->setPixmap(bg);
		repaint();
		sleep(3);
	}
}
#endif

void MainWindow::updateLCD(int Id, float value)
{
	//printf("LCD %d at %f\n", Id, value);
	R_array[Id]->display(value);
	ledIP[Id]->setPixmap(green_on);
}

void MainWindow::switchLed(int Id, bool status)
{
	if (status)
	{
		//printf("led %d on\n", Id);
		ledIP[Id]->setPixmap(green_on);
	}
	else
	{
		//printf("led %d off\n", Id);
		ledIP[Id]->setPixmap(red_off);
	}
}

void MainWindow::Close(void)
{
	comm_th->quit();
	delete comm_th;
	close();
}

void MainWindow::setOrientation(ScreenOrientation orientation)
{
#if defined(Q_OS_SYMBIAN)
	// If the version of Qt on the device is < 4.7.2, that attribute won't work
	if (orientation != ScreenOrientationAuto) {
		const QStringList v = QString::fromAscii(qVersion()).split(QLatin1Char('.'));
		if (v.count() == 3 && (v.at(0).toInt() << 16 | v.at(1).toInt() << 8 | v.at(2).toInt()) < 0x040702) {
			qWarning("Screen orientation locking only supported with Qt 4.7.2 and above");
			return;
		}
	}
#endif // Q_OS_SYMBIAN

	Qt::WidgetAttribute attribute;
	switch (orientation) {
#if QT_VERSION < 0x040702
		// Qt < 4.7.2 does not yet have the Qt::WA_*Orientation attributes
		case ScreenOrientationLockPortrait:
			attribute = static_cast<Qt::WidgetAttribute>(128);
			break;
		case ScreenOrientationLockLandscape:
			attribute = static_cast<Qt::WidgetAttribute>(129);
			break;
		default:
		case ScreenOrientationAuto:
			attribute = static_cast<Qt::WidgetAttribute>(130);
			break;
#else // QT_VERSION < 0x040702
		case ScreenOrientationLockPortrait:
			attribute = Qt::WA_LockPortraitOrientation;
			break;
		case ScreenOrientationLockLandscape:
			attribute = Qt::WA_LockLandscapeOrientation;
			break;
		default:
		case ScreenOrientationAuto:
			attribute = Qt::WA_AutoOrientation;
			break;
#endif // QT_VERSION < 0x040702
	};
	setAttribute(attribute, true);
}

void MainWindow::showExpanded()
{
#ifdef Q_OS_SYMBIAN
	showFullScreen();
#elif defined(Q_WS_MAEMO_5) || defined(Q_WS_MAEMO_6)
	showMaximized();
#else
	show();
#endif
}
